version: 2

sources:
  - name: dev_bronze                         # dbt source name
    database: logistics               # Snowflake database
    schema: dev_bronze                       # schema where bronze lives
    tables:
      - name: bronze_dim_customer
      - name: bronze_dim_store
      - name: bronze_dim_product
      - name: bronze_dim_date
      - name: bronze_fact_sales
      - name: bronze_fact_returns


{# WITH customers as (
    SELECT * FROM {{ source('dev_bronze','bronze_dim_customer') }}
    {# SELECT * FROM {{ ref("bronze_dim_customer") }} #}
)
SELECT * FROM customers #}

WITH customers AS (
    SELECT * FROM {{ ref("bronze_dim_customer") }}
),
deduplicate_customers AS (
    SELECT
        customer_sk as customer_id,
        customer_code,
        first_name,
        last_name,
        gender,
        email,
        phone,
        loyalty_tier,
        signup_date,
        ROW_NUMBER() OVER(PARTITION BY customer_sk ORDER BY signup_date DESC) AS row_count
    FROM customers
)
SELECT * FROM deduplicate_customers WHERE row_count = 1

-- Check for duplicate customer_id

SELECT
    customer_sk AS customer_id,
    COUNT(*) AS duplicate_customer_id
FROM
    {{ ref("bronze_dim_customer") }}
GROUP BY 
    customer_sk
HAVING 
    COUNT(*) > 1
ORDER BY 
    duplicate_customer_id;


    CHECK FOR NULL VALUES
    =================
WITH products AS (
    SELECT * FROM {{ ref("bronze_dim_product") }}
)
SELECT
SUM(CASE WHEN product_sk IS NULL THEN 1 ELSE 0 END) AS product_sk_null,
SUM(CASE WHEN product_code IS NULL THEN 1 ELSE 0 END) AS product_code_null,
SUM(CASE WHEN product_name IS NULL THEN 1 ELSE 0 END) AS product_name_null,
SUM(CASE WHEN department IS NULL THEN 1 ELSE 0 END) AS department_null,
SUM(CASE WHEN category IS NULL THEN 1 ELSE 0 END) AS category_null,
SUM(CASE WHEN supplier_sk IS NULL THEN 1 ELSE 0 END) AS supplier_sk_id,
SUM(CASE WHEN list_price IS NULL THEN 1 ELSE 0 END) AS list_price_null 
FROM products

RECENCY
======
{# FInd the timeframe of the last trip/order for each customer #}

WITH last_trip AS (
    SELECT
        customer_id,
        MAX(trip_start_time)::DATE AS last_trip_date
        FROM 
            {{ source("dev_gold","gold_fact_trips") }}
        GROUP BY
            customer_id
)
SELECT
    customer_id,
    last_trip_date,
    DATEDIFF("day", last_trip_date, CURRENT_DATE()) AS days_since_last_trip,
    CASE
        WHEN DATEDIFF("day", last_trip_date, CURRENT_DATE()) <=10
            THEN '0 - 10 days'
        WHEN DATEDIFF("day", last_trip_date, CURRENT_DATE()) > 10
        AND DATEDIFF("day", last_trip_date, CURRENT_DATE()) <= 20
            THEN '11 - 20 days'
        WHEN DATEDIFF("day", last_trip_date, CURRENT_DATE()) > 20
        AND DATEDIFF("day", last_trip_date, CURRENT_DATE()) <= 30
            THEN '21 - 30 days'
        ELSE
            'Over 30 days'
        END AS recency
FROM
    last_trip

ORDER OF SQL STATEMENTS
=======================
SELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY




